// lpddr2_phy_mm_interconnect_1.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 182 at 2014.05.17.03:37:16

`timescale 1 ps / 1 ps
module lpddr2_phy_mm_interconnect_1 (
		input  wire        csr_clk_out_clk_clk,                          //                        csr_clk_out_clk.clk
		input  wire        csr_bridge_reset_reset_bridge_in_reset_reset, // csr_bridge_reset_reset_bridge_in_reset.reset
		input  wire [15:0] csr_bridge_m0_address,                        //                          csr_bridge_m0.address
		output wire        csr_bridge_m0_waitrequest,                    //                                       .waitrequest
		input  wire [3:0]  csr_bridge_m0_byteenable,                     //                                       .byteenable
		input  wire        csr_bridge_m0_read,                           //                                       .read
		output wire [31:0] csr_bridge_m0_readdata,                       //                                       .readdata
		output wire        csr_bridge_m0_readdatavalid,                  //                                       .readdatavalid
		input  wire        csr_bridge_m0_write,                          //                                       .write
		input  wire [31:0] csr_bridge_m0_writedata,                      //                                       .writedata
		output wire [9:0]  c0_csr_address,                               //                                 c0_csr.address
		output wire        c0_csr_write,                                 //                                       .write
		output wire        c0_csr_read,                                  //                                       .read
		input  wire [7:0]  c0_csr_readdata,                              //                                       .readdata
		output wire [7:0]  c0_csr_writedata,                             //                                       .writedata
		output wire [0:0]  c0_csr_byteenable,                            //                                       .byteenable
		input  wire        c0_csr_readdatavalid,                         //                                       .readdatavalid
		input  wire        c0_csr_waitrequest,                           //                                       .waitrequest
		output wire [7:0]  p0_csr_address,                               //                                 p0_csr.address
		output wire        p0_csr_write,                                 //                                       .write
		output wire        p0_csr_read,                                  //                                       .read
		input  wire [31:0] p0_csr_readdata,                              //                                       .readdata
		output wire [31:0] p0_csr_writedata,                             //                                       .writedata
		output wire [3:0]  p0_csr_byteenable,                            //                                       .byteenable
		input  wire        p0_csr_readdatavalid,                         //                                       .readdatavalid
		input  wire        p0_csr_waitrequest                            //                                       .waitrequest
	);

	wire         csr_bridge_m0_translator_avalon_universal_master_0_waitrequest;              // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_waitrequest -> csr_bridge_m0_translator:uav_waitrequest
	wire   [2:0] csr_bridge_m0_translator_avalon_universal_master_0_burstcount;               // csr_bridge_m0_translator:uav_burstcount -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] csr_bridge_m0_translator_avalon_universal_master_0_writedata;                // csr_bridge_m0_translator:uav_writedata -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_writedata
	wire  [17:0] csr_bridge_m0_translator_avalon_universal_master_0_address;                  // csr_bridge_m0_translator:uav_address -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_address
	wire         csr_bridge_m0_translator_avalon_universal_master_0_lock;                     // csr_bridge_m0_translator:uav_lock -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_lock
	wire         csr_bridge_m0_translator_avalon_universal_master_0_write;                    // csr_bridge_m0_translator:uav_write -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_write
	wire         csr_bridge_m0_translator_avalon_universal_master_0_read;                     // csr_bridge_m0_translator:uav_read -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] csr_bridge_m0_translator_avalon_universal_master_0_readdata;                 // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_readdata -> csr_bridge_m0_translator:uav_readdata
	wire         csr_bridge_m0_translator_avalon_universal_master_0_debugaccess;              // csr_bridge_m0_translator:uav_debugaccess -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] csr_bridge_m0_translator_avalon_universal_master_0_byteenable;               // csr_bridge_m0_translator:uav_byteenable -> csr_bridge_m0_translator_avalon_universal_master_0_agent:av_byteenable
	wire         csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid;            // csr_bridge_m0_translator_avalon_universal_master_0_agent:av_readdatavalid -> csr_bridge_m0_translator:uav_readdatavalid
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // p0_csr_translator:uav_waitrequest -> p0_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;              // p0_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> p0_csr_translator:uav_burstcount
	wire  [31:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;               // p0_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> p0_csr_translator:uav_writedata
	wire  [17:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_address;                 // p0_csr_translator_avalon_universal_slave_0_agent:m0_address -> p0_csr_translator:uav_address
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_write;                   // p0_csr_translator_avalon_universal_slave_0_agent:m0_write -> p0_csr_translator:uav_write
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                    // p0_csr_translator_avalon_universal_slave_0_agent:m0_lock -> p0_csr_translator:uav_lock
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_read;                    // p0_csr_translator_avalon_universal_slave_0_agent:m0_read -> p0_csr_translator:uav_read
	wire  [31:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                // p0_csr_translator:uav_readdata -> p0_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // p0_csr_translator:uav_readdatavalid -> p0_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // p0_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> p0_csr_translator:uav_debugaccess
	wire   [3:0] p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;              // p0_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> p0_csr_translator:uav_byteenable
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;            // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [88:0] p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;             // p0_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;            // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [88:0] p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // p0_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_src_endofpacket;                                                // cmd_xbar_mux:src_endofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                      // cmd_xbar_mux:src_valid -> p0_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_src_startofpacket;                                              // cmd_xbar_mux:src_startofpacket -> p0_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [87:0] cmd_xbar_mux_src_data;                                                       // cmd_xbar_mux:src_data -> p0_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire   [1:0] cmd_xbar_mux_src_channel;                                                    // cmd_xbar_mux:src_channel -> p0_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_src_ready;                                                      // p0_csr_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // c0_csr_translator:uav_waitrequest -> c0_csr_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [0:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;              // c0_csr_translator_avalon_universal_slave_0_agent:m0_burstcount -> c0_csr_translator:uav_burstcount
	wire   [7:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;               // c0_csr_translator_avalon_universal_slave_0_agent:m0_writedata -> c0_csr_translator:uav_writedata
	wire  [17:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_address;                 // c0_csr_translator_avalon_universal_slave_0_agent:m0_address -> c0_csr_translator:uav_address
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_write;                   // c0_csr_translator_avalon_universal_slave_0_agent:m0_write -> c0_csr_translator:uav_write
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                    // c0_csr_translator_avalon_universal_slave_0_agent:m0_lock -> c0_csr_translator:uav_lock
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_read;                    // c0_csr_translator_avalon_universal_slave_0_agent:m0_read -> c0_csr_translator:uav_read
	wire   [7:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                // c0_csr_translator:uav_readdata -> c0_csr_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // c0_csr_translator:uav_readdatavalid -> c0_csr_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // c0_csr_translator_avalon_universal_slave_0_agent:m0_debugaccess -> c0_csr_translator:uav_debugaccess
	wire   [0:0] c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;              // c0_csr_translator_avalon_universal_slave_0_agent:m0_byteenable -> c0_csr_translator:uav_byteenable
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;            // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_valid -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [61:0] c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;             // c0_csr_translator_avalon_universal_slave_0_agent:rf_source_data -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;            // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [61:0] c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // c0_csr_translator_avalon_universal_slave_0_agent:rf_sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [9:0] c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [9:0] c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // c0_csr_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire         csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket;     // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid;           // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket;   // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [87:0] csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data;            // csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready;           // addr_router:sink_ready -> csr_bridge_m0_translator_avalon_universal_master_0_agent:cp_ready
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // p0_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                   // p0_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // p0_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [87:0] p0_csr_translator_avalon_universal_slave_0_agent_rp_data;                    // p0_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         p0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> p0_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_src_endofpacket;                                                   // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         id_router_src_valid;                                                         // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire         id_router_src_startofpacket;                                                 // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [87:0] id_router_src_data;                                                          // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [1:0] id_router_src_channel;                                                       // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire         id_router_src_ready;                                                         // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // c0_csr_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                   // c0_csr_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // c0_csr_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [60:0] c0_csr_translator_avalon_universal_slave_0_agent_rp_data;                    // c0_csr_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire         c0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> c0_csr_translator_avalon_universal_slave_0_agent:rp_ready
	wire         addr_router_src_endofpacket;                                                 // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire         addr_router_src_valid;                                                       // addr_router:src_valid -> limiter:cmd_sink_valid
	wire         addr_router_src_startofpacket;                                               // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [87:0] addr_router_src_data;                                                        // addr_router:src_data -> limiter:cmd_sink_data
	wire   [1:0] addr_router_src_channel;                                                     // addr_router:src_channel -> limiter:cmd_sink_channel
	wire         addr_router_src_ready;                                                       // limiter:cmd_sink_ready -> addr_router:src_ready
	wire         limiter_cmd_src_endofpacket;                                                 // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         limiter_cmd_src_startofpacket;                                               // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [87:0] limiter_cmd_src_data;                                                        // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [1:0] limiter_cmd_src_channel;                                                     // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire         limiter_cmd_src_ready;                                                       // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire         rsp_xbar_mux_src_endofpacket;                                                // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                      // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire         rsp_xbar_mux_src_startofpacket;                                              // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [87:0] rsp_xbar_mux_src_data;                                                       // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [1:0] rsp_xbar_mux_src_channel;                                                    // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire         rsp_xbar_mux_src_ready;                                                      // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire         limiter_rsp_src_endofpacket;                                                 // limiter:rsp_src_endofpacket -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         limiter_rsp_src_valid;                                                       // limiter:rsp_src_valid -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_valid
	wire         limiter_rsp_src_startofpacket;                                               // limiter:rsp_src_startofpacket -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [87:0] limiter_rsp_src_data;                                                        // limiter:rsp_src_data -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_data
	wire   [1:0] limiter_rsp_src_channel;                                                     // limiter:rsp_src_channel -> csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_channel
	wire         limiter_rsp_src_ready;                                                       // csr_bridge_m0_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire         burst_adapter_source0_endofpacket;                                           // burst_adapter:source0_endofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_source0_valid;                                                 // burst_adapter:source0_valid -> c0_csr_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_source0_startofpacket;                                         // burst_adapter:source0_startofpacket -> c0_csr_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [60:0] burst_adapter_source0_data;                                                  // burst_adapter:source0_data -> c0_csr_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_source0_ready;                                                 // c0_csr_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [1:0] burst_adapter_source0_channel;                                               // burst_adapter:source0_channel -> c0_csr_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_demux_src0_endofpacket;                                             // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                   // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                           // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [87:0] cmd_xbar_demux_src0_data;                                                    // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [1:0] cmd_xbar_demux_src0_channel;                                                 // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                   // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         cmd_xbar_demux_src1_endofpacket;                                             // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire         cmd_xbar_demux_src1_valid;                                                   // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire         cmd_xbar_demux_src1_startofpacket;                                           // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [87:0] cmd_xbar_demux_src1_data;                                                    // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [1:0] cmd_xbar_demux_src1_channel;                                                 // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire         cmd_xbar_demux_src1_ready;                                                   // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                             // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                   // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                           // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [87:0] rsp_xbar_demux_src0_data;                                                    // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [1:0] rsp_xbar_demux_src0_channel;                                                 // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                   // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         rsp_xbar_demux_001_src0_endofpacket;                                         // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire         rsp_xbar_demux_001_src0_valid;                                               // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire         rsp_xbar_demux_001_src0_startofpacket;                                       // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [87:0] rsp_xbar_demux_001_src0_data;                                                // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [1:0] rsp_xbar_demux_001_src0_channel;                                             // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire         rsp_xbar_demux_001_src0_ready;                                               // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire         id_router_001_src_endofpacket;                                               // id_router_001:src_endofpacket -> width_adapter:in_endofpacket
	wire         id_router_001_src_valid;                                                     // id_router_001:src_valid -> width_adapter:in_valid
	wire         id_router_001_src_startofpacket;                                             // id_router_001:src_startofpacket -> width_adapter:in_startofpacket
	wire  [60:0] id_router_001_src_data;                                                      // id_router_001:src_data -> width_adapter:in_data
	wire   [1:0] id_router_001_src_channel;                                                   // id_router_001:src_channel -> width_adapter:in_channel
	wire         id_router_001_src_ready;                                                     // width_adapter:in_ready -> id_router_001:src_ready
	wire         width_adapter_src_endofpacket;                                               // width_adapter:out_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire         width_adapter_src_valid;                                                     // width_adapter:out_valid -> rsp_xbar_demux_001:sink_valid
	wire         width_adapter_src_startofpacket;                                             // width_adapter:out_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [87:0] width_adapter_src_data;                                                      // width_adapter:out_data -> rsp_xbar_demux_001:sink_data
	wire         width_adapter_src_ready;                                                     // rsp_xbar_demux_001:sink_ready -> width_adapter:out_ready
	wire   [1:0] width_adapter_src_channel;                                                   // width_adapter:out_channel -> rsp_xbar_demux_001:sink_channel
	wire         cmd_xbar_mux_001_src_endofpacket;                                            // cmd_xbar_mux_001:src_endofpacket -> width_adapter_001:in_endofpacket
	wire         cmd_xbar_mux_001_src_valid;                                                  // cmd_xbar_mux_001:src_valid -> width_adapter_001:in_valid
	wire         cmd_xbar_mux_001_src_startofpacket;                                          // cmd_xbar_mux_001:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [87:0] cmd_xbar_mux_001_src_data;                                                   // cmd_xbar_mux_001:src_data -> width_adapter_001:in_data
	wire   [1:0] cmd_xbar_mux_001_src_channel;                                                // cmd_xbar_mux_001:src_channel -> width_adapter_001:in_channel
	wire         cmd_xbar_mux_001_src_ready;                                                  // width_adapter_001:in_ready -> cmd_xbar_mux_001:src_ready
	wire         width_adapter_001_src_endofpacket;                                           // width_adapter_001:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire         width_adapter_001_src_valid;                                                 // width_adapter_001:out_valid -> burst_adapter:sink0_valid
	wire         width_adapter_001_src_startofpacket;                                         // width_adapter_001:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [60:0] width_adapter_001_src_data;                                                  // width_adapter_001:out_data -> burst_adapter:sink0_data
	wire         width_adapter_001_src_ready;                                                 // burst_adapter:sink0_ready -> width_adapter_001:out_ready
	wire   [1:0] width_adapter_001_src_channel;                                               // width_adapter_001:out_channel -> burst_adapter:sink0_channel
	wire   [1:0] limiter_cmd_valid_data;                                                      // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) csr_bridge_m0_translator (
		.clk                      (csr_clk_out_clk_clk),                                              //                       clk.clk
		.reset                    (csr_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (csr_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (csr_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (csr_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (csr_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (csr_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (csr_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (csr_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (csr_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (csr_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (csr_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (csr_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (csr_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (csr_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                  (csr_bridge_m0_read),                                               //                          .read
		.av_readdata              (csr_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (csr_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (csr_bridge_m0_write),                                              //                          .write
		.av_writedata             (csr_bridge_m0_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                             //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                             //               (terminated)
		.av_lock                  (1'b0),                                                             //               (terminated)
		.av_debugaccess           (1'b0),                                                             //               (terminated)
		.uav_clken                (),                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                             //               (terminated)
		.uav_response             (2'b00),                                                            //               (terminated)
		.av_response              (),                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) p0_csr_translator (
		.clk                      (csr_clk_out_clk_clk),                                               //                      clk.clk
		.reset                    (csr_bridge_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (p0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (p0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (p0_csr_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (p0_csr_write),                                                      //                         .write
		.av_read                  (p0_csr_read),                                                       //                         .read
		.av_readdata              (p0_csr_readdata),                                                   //                         .readdata
		.av_writedata             (p0_csr_writedata),                                                  //                         .writedata
		.av_byteenable            (p0_csr_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (p0_csr_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (p0_csr_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                  //              (terminated)
		.av_burstcount            (),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                  //              (terminated)
		.av_lock                  (),                                                                  //              (terminated)
		.av_chipselect            (),                                                                  //              (terminated)
		.av_clken                 (),                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                              //              (terminated)
		.av_debugaccess           (),                                                                  //              (terminated)
		.av_outputenable          (),                                                                  //              (terminated)
		.uav_response             (),                                                                  //              (terminated)
		.av_response              (2'b00),                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) c0_csr_translator (
		.clk                      (csr_clk_out_clk_clk),                                               //                      clk.clk
		.reset                    (csr_bridge_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (c0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (c0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (c0_csr_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (c0_csr_write),                                                      //                         .write
		.av_read                  (c0_csr_read),                                                       //                         .read
		.av_readdata              (c0_csr_readdata),                                                   //                         .readdata
		.av_writedata             (c0_csr_writedata),                                                  //                         .writedata
		.av_byteenable            (c0_csr_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (c0_csr_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (c0_csr_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                  //              (terminated)
		.av_burstcount            (),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                  //              (terminated)
		.av_lock                  (),                                                                  //              (terminated)
		.av_chipselect            (),                                                                  //              (terminated)
		.av_clken                 (),                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                              //              (terminated)
		.av_debugaccess           (),                                                                  //              (terminated)
		.av_outputenable          (),                                                                  //              (terminated)
		.uav_response             (),                                                                  //              (terminated)
		.av_response              (2'b00),                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                               //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BEGIN_BURST           (71),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_TRANS_LOCK            (58),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) csr_bridge_m0_translator_avalon_universal_master_0_agent (
		.clk                     (csr_clk_out_clk_clk),                                                       //       clk.clk
		.reset                   (csr_bridge_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address              (csr_bridge_m0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (csr_bridge_m0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (csr_bridge_m0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (csr_bridge_m0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (csr_bridge_m0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (csr_bridge_m0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (csr_bridge_m0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (csr_bridge_m0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (csr_bridge_m0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (csr_bridge_m0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (csr_bridge_m0_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                     //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                      //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                   //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                               //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                     //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_TRANS_LOCK            (58),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) p0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (csr_clk_out_clk_clk),                                                         //             clk.clk
		.reset                   (csr_bridge_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (p0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (p0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (p0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (p0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (p0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (p0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (p0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (p0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (p0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (p0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (p0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (p0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                    //                .channel
		.rf_sink_ready           (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (p0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (csr_clk_out_clk_clk),                                                         //       clk.clk
		.reset             (csr_bridge_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (p0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (44),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (26),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (27),
		.PKT_TRANS_POSTED          (28),
		.PKT_TRANS_WRITE           (29),
		.PKT_TRANS_READ            (30),
		.PKT_TRANS_LOCK            (31),
		.PKT_SRC_ID_H              (46),
		.PKT_SRC_ID_L              (46),
		.PKT_DEST_ID_H             (47),
		.PKT_DEST_ID_L             (47),
		.PKT_BURSTWRAP_H           (36),
		.PKT_BURSTWRAP_L           (36),
		.PKT_BYTE_CNT_H            (35),
		.PKT_BYTE_CNT_L            (33),
		.PKT_PROTECTION_H          (51),
		.PKT_PROTECTION_L          (49),
		.PKT_RESPONSE_STATUS_H     (57),
		.PKT_RESPONSE_STATUS_L     (56),
		.PKT_BURST_SIZE_H          (39),
		.PKT_BURST_SIZE_L          (37),
		.PKT_ORI_BURST_SIZE_L      (58),
		.PKT_ORI_BURST_SIZE_H      (60),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (61),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) c0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (csr_clk_out_clk_clk),                                                         //             clk.clk
		.reset                   (csr_bridge_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (c0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (c0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (c0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (c0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (c0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (c0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (c0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (c0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (c0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (c0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (c0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (c0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                 //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                 //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                  //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                           //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                               //                .channel
		.rf_sink_ready           (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (62),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (csr_clk_out_clk_clk),                                                         //       clk.clk
		.reset             (csr_bridge_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (c0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (csr_clk_out_clk_clk),                                                   //       clk.clk
		.reset             (csr_bridge_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                  // (terminated)
		.out_startofpacket (),                                                                      // (terminated)
		.out_endofpacket   (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	lpddr2_phy_mm_interconnect_1_addr_router addr_router (
		.sink_ready         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (csr_bridge_m0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (csr_clk_out_clk_clk),                                                       //       clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                     //       src.ready
		.src_valid          (addr_router_src_valid),                                                     //          .valid
		.src_data           (addr_router_src_data),                                                      //          .data
		.src_channel        (addr_router_src_channel),                                                   //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_id_router id_router (
		.sink_ready         (p0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (p0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (p0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (p0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (p0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (csr_clk_out_clk_clk),                                               //       clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_src_ready),                                               //       src.ready
		.src_valid          (id_router_src_valid),                                               //          .valid
		.src_data           (id_router_src_data),                                                //          .data
		.src_channel        (id_router_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                          //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_id_router_001 id_router_001 (
		.sink_ready         (c0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (c0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (c0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (c0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (c0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (csr_clk_out_clk_clk),                                               //       clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                           //       src.ready
		.src_valid          (id_router_001_src_valid),                                           //          .valid
		.src_data           (id_router_001_src_data),                                            //          .data
		.src_channel        (id_router_001_src_channel),                                         //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (csr_clk_out_clk_clk),                          //       clk.clk
		.reset                  (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                        //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                        //          .valid
		.cmd_sink_data          (addr_router_src_data),                         //          .data
		.cmd_sink_channel       (addr_router_src_channel),                      //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                  //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                       //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                     //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                        //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                 //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (26),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (44),
		.PKT_BYTE_CNT_H            (35),
		.PKT_BYTE_CNT_L            (33),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (39),
		.PKT_BURST_SIZE_L          (37),
		.PKT_BURST_TYPE_H          (41),
		.PKT_BURST_TYPE_L          (40),
		.PKT_BURSTWRAP_H           (36),
		.PKT_BURSTWRAP_L           (36),
		.PKT_TRANS_COMPRESSED_READ (27),
		.PKT_TRANS_WRITE           (29),
		.PKT_TRANS_READ            (30),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (61),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (33),
		.OUT_BURSTWRAP_H           (36),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1)
	) burst_adapter (
		.clk                   (csr_clk_out_clk_clk),                          //       cr0.clk
		.reset                 (csr_bridge_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_001_src_valid),                  //     sink0.valid
		.sink0_data            (width_adapter_001_src_data),                   //          .data
		.sink0_channel         (width_adapter_001_src_channel),                //          .channel
		.sink0_startofpacket   (width_adapter_001_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (width_adapter_001_src_endofpacket),            //          .endofpacket
		.sink0_ready           (width_adapter_001_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (burst_adapter_source0_data),                   //          .data
		.source0_channel       (burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                   //          .ready
	);

	lpddr2_phy_mm_interconnect_1_cmd_xbar_demux cmd_xbar_demux (
		.clk                (csr_clk_out_clk_clk),                          //        clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                      //           .channel
		.sink_data          (limiter_cmd_src_data),                         //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                    //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                    //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                     //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                  //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),            //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),              //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                    //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                    //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                     //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                  //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),            //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket)               //           .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (csr_clk_out_clk_clk),                          //       clk.clk
		.reset               (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                       //          .valid
		.src_data            (cmd_xbar_mux_src_data),                        //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket)               //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (csr_clk_out_clk_clk),                          //       clk.clk
		.reset               (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                    //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket)               //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux (
		.clk                (csr_clk_out_clk_clk),                          //       clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                          //      sink.ready
		.sink_channel       (id_router_src_channel),                        //          .channel
		.sink_data          (id_router_src_data),                           //          .data
		.sink_startofpacket (id_router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                    //          .endofpacket
		.sink_valid         (id_router_src_valid),                          //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                     //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket)               //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (csr_clk_out_clk_clk),                          //       clk.clk
		.reset              (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (width_adapter_src_channel),                    //          .channel
		.sink_data          (width_adapter_src_data),                       //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)           //          .endofpacket
	);

	lpddr2_phy_mm_interconnect_1_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (csr_clk_out_clk_clk),                          //       clk.clk
		.reset               (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                       //          .valid
		.src_data            (rsp_xbar_mux_src_data),                        //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (26),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (35),
		.IN_PKT_BYTE_CNT_L             (33),
		.IN_PKT_TRANS_COMPRESSED_READ  (27),
		.IN_PKT_BURSTWRAP_H            (36),
		.IN_PKT_BURSTWRAP_L            (36),
		.IN_PKT_BURST_SIZE_H           (39),
		.IN_PKT_BURST_SIZE_L           (37),
		.IN_PKT_RESPONSE_STATUS_H      (57),
		.IN_PKT_RESPONSE_STATUS_L      (56),
		.IN_PKT_TRANS_EXCLUSIVE        (32),
		.IN_PKT_BURST_TYPE_H           (41),
		.IN_PKT_BURST_TYPE_L           (40),
		.IN_PKT_ORI_BURST_SIZE_L       (58),
		.IN_PKT_ORI_BURST_SIZE_H       (60),
		.IN_ST_DATA_W                  (61),
		.OUT_PKT_ADDR_H                (53),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (60),
		.OUT_PKT_TRANS_COMPRESSED_READ (54),
		.OUT_PKT_BURST_SIZE_H          (66),
		.OUT_PKT_BURST_SIZE_L          (64),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (59),
		.OUT_PKT_BURST_TYPE_H          (68),
		.OUT_PKT_BURST_TYPE_L          (67),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (csr_clk_out_clk_clk),                          //       clk.clk
		.reset                (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_001_src_valid),                      //      sink.valid
		.in_channel           (id_router_001_src_channel),                    //          .channel
		.in_startofpacket     (id_router_001_src_startofpacket),              //          .startofpacket
		.in_endofpacket       (id_router_001_src_endofpacket),                //          .endofpacket
		.in_ready             (id_router_001_src_ready),                      //          .ready
		.in_data              (id_router_001_src_data),                       //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (width_adapter_src_data),                       //          .data
		.out_channel          (width_adapter_src_channel),                    //          .channel
		.out_valid            (width_adapter_src_valid),                      //          .valid
		.out_ready            (width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (53),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (60),
		.IN_PKT_TRANS_COMPRESSED_READ  (54),
		.IN_PKT_BURSTWRAP_H            (63),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (66),
		.IN_PKT_BURST_SIZE_L           (64),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (59),
		.IN_PKT_BURST_TYPE_H           (68),
		.IN_PKT_BURST_TYPE_L           (67),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (26),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (35),
		.OUT_PKT_BYTE_CNT_L            (33),
		.OUT_PKT_TRANS_COMPRESSED_READ (27),
		.OUT_PKT_BURST_SIZE_H          (39),
		.OUT_PKT_BURST_SIZE_L          (37),
		.OUT_PKT_RESPONSE_STATUS_H     (57),
		.OUT_PKT_RESPONSE_STATUS_L     (56),
		.OUT_PKT_TRANS_EXCLUSIVE       (32),
		.OUT_PKT_BURST_TYPE_H          (41),
		.OUT_PKT_BURST_TYPE_L          (40),
		.OUT_PKT_ORI_BURST_SIZE_L      (58),
		.OUT_PKT_ORI_BURST_SIZE_H      (60),
		.OUT_ST_DATA_W                 (61),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (csr_clk_out_clk_clk),                          //       clk.clk
		.reset                (csr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_001_src_valid),                   //      sink.valid
		.in_channel           (cmd_xbar_mux_001_src_channel),                 //          .channel
		.in_startofpacket     (cmd_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.in_ready             (cmd_xbar_mux_001_src_ready),                   //          .ready
		.in_data              (cmd_xbar_mux_001_src_data),                    //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),            //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                   //          .data
		.out_channel          (width_adapter_001_src_channel),                //          .channel
		.out_valid            (width_adapter_001_src_valid),                  //          .valid
		.out_ready            (width_adapter_001_src_ready),                  //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

endmodule
